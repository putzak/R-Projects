sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- round(mean(complete_air$Ozone, ), 2)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- complete_air$Ozone - meanoz
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- round(mean(complete_air$Ozone, ), 3)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- complete_air$Ozone - meanoz
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- round(mean(complete_air$Ozone, ), 1)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- complete_air$Ozone - meanoz
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- round(mean(complete_air$Ozone, ), 1)
meansol <- mean(complete_air$Solar.R)
meanwin <- round(mean(complete_air$Wind), 1)
meantem <- round(mean(complete_air$Temp), 1)
complete_air$OzoneDelta <- complete_air$Ozone - meanoz
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- mean(complete_air$Ozone)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- round(complete_air$Ozone - meanoz, 1)
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
complete_air$WindDelta <- round(complete_air$Wind - meanwin, 1)
complete_air$TempDelta <- round(complete_air$Temp - meantem, 1)
str(complete_air)
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- mean(complete_air$Ozone)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- round(complete_air$Ozone - meanoz, 1)
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
complete_air$WindDelta <- round(complete_air$Wind - meanwin, 1)
complete_air$TempDelta <- round(complete_air$Temp - meantem, 1)
complete_air %>% select(Ozone, OzoneDelta)
str(complete_air)
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- mean(complete_air$Ozone)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- round(complete_air$Ozone - meanoz, 1)
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
complete_air$WindDelta <- round(complete_air$Wind - meanwin, 1)
complete_air$TempDelta <- round(complete_air$Temp - meantem, 1)
complete_air <- complete_air[, c(1, 7, 2, 8, 3, 9, 4, 10 , 5, 6)]
View(complete_air)
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- mean(complete_air$Ozone)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- round(complete_air$Ozone - meanoz, 1)
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
complete_air$WindDelta <- round(complete_air$Wind - meanwin, 1)
complete_air$TempDelta <- round(complete_air$Temp - meantem, 1)
complete_air <- complete_air[, c(5, 6, 1, 7, 2, 8, 3, 9, 4, 10)]
# In this exercise, we will use the airquality data set. This data set contains
# information on daily air quality measurements in New York in 1973. Load the
# data set and check, for each variable, the number of missing values.
data("airquality")
# sum(is.na(airquality$Ozone))
# sum(is.na(airquality$Solar.R))
# sum(is.na(airquality$Wind))
# sum(is.na(airquality$Temp))
# sum(is.na(airquality$Month))
# sum(is.na(airquality$Day))
sum(is.na(airquality[1]))
sum(is.na(airquality[2]))
sum(is.na(airquality[3]))
sum(is.na(airquality[4]))
sum(is.na(airquality[5]))
sum(is.na(airquality[6]))
# We want to get rid of the missing values. Remove all incomplete data points.
# What could be an alternative to this strategy?
complete_air <- airquality[complete.cases(airquality), ]
complete_air2 <- airquality[complete.cases(airquality[2:6]), ] # NA ozone not rm
# Now use this data frame (obtained in exercise 5.2) to calculate the mean
# values for the first four columns. Also create new columns that hold the
# difference between the mean value of each column and the specific values of
# the corresponding variable.
meanoz <- mean(complete_air$Ozone)
meansol <- mean(complete_air$Solar.R)
meanwin <- mean(complete_air$Wind)
meantem <- mean(complete_air$Temp)
complete_air$OzoneDelta <- round(complete_air$Ozone - meanoz, 1)
complete_air$SolarDelta <- round(complete_air$Solar.R - meansol, 1)
complete_air$WindDelta <- round(complete_air$Wind - meanwin, 1)
complete_air$TempDelta <- round(complete_air$Temp - meantem, 1)
complete_air <- complete_air[, c(5, 6, 1, 7, 2, 8, 3, 9, 4, 10)] # rearrange
# Save the data frame as a .csv file in a directory of your choice (e.g. a
# folder ‘Derived_data’) and clean the workspace.
write.csv(complete_air, file=("2.Derived Data/AirQuality.csv"))
esoph
str(esoph)
head(esoph)
tail(esoph)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0)]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
head(esoph)
str(esoph)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == 4), ]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "10-19" ), ]
str(esoph)
str(esoph$tobgp)
esoph[which(esoph$tobgp == "4")]
esoph[which(esoph$tobgp == 1)]
esoph[which(esoph$tobgp > 1)]
order(esoph)
order(esoph$tobgp)
esoph$tobgp
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
str(esoph, nchar.max)
help(str)
str(esoph, nchar.max = 128)
str(esoph, nchar.max = 256)
str(esoph, list.len = nrow(esoph))
str(esoph, list.len = ncol(esoph))
print(esoph$tobgp)
uniqueTB <- unique(esoph$tobgp)
print(uniqueTB)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" | esoph$ncases == 0)]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" | esoph$ncases == 0), ]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
str(esoph)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day")]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrol > 9)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Can you also subset the data so that you only include rows in which the
# control group is larger than twice the number of cases?
subset(esoph, ncontrols > 2 * ncases)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Can you also subset the data so that you only include rows in which the
# control group is larger than twice the number of cases?
subset(esoph, ncontrols > 2 * ncases)
# Produce the same answer as in exercise 2.2 but now by using the ! sign in your
# statement.
subset(esoph, ncontrols !< 2 * ncases)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Can you also subset the data so that you only include rows in which the
# control group is larger than twice the number of cases?
subset(esoph, ncontrols > 2 * ncases)
# Produce the same answer as in exercise 2.2 but now by using the ! sign in your
# statement.
subset(esoph, !ncontrols < 2 * ncases)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Can you also subset the data so that you only include rows in which the
# control group is larger than twice the number of cases?
test1 <- subset(esoph, ncontrols > 2 * ncases)
# Produce the same answer as in exercise 2.2 but now by using the ! sign in your
# statement.
test2 <- subset(esoph, !ncontrols < 2 * ncases)
identical(test1, test2)
str(test1)
str(test2)
# Load dataset
esoph
# Subset the esoph data set to obtain only those rows with 0 cancer cases.
esoph[which(esoph$ncases > 0), ]
# Subset the esoph data set on the group with the highest tobacco consumption.
esoph[which(esoph$tobgp == "30+" ), ]
# Now subset the esoph data set on the group with the highest tobacco
# consumption AND equal to 0 cases.
esoph[which(esoph$tobgp == "30+" & esoph$ncases == 0), ]
# Subset the esoph data set on the group with the lowest tobacco consumption OR
# the group with the lowest alcohol consumption?
esoph[which(esoph$tobgp == "0-9g/day" | esoph$alcgp == "0-39g/day"), ]
# Subset the esoph data so that you only include rows in which the control group
# has at least 10 observations.
subset(esoph,ncontrols > 9)
# Can you also subset the data so that you only include rows in which the
# control group is larger than twice the number of cases?
test1 <- subset(esoph, ncontrols > 2 * ncases)
# Produce the same answer as in exercise 2.2 but now by using the ! sign in your
# statement.
test2 <- subset(esoph, !ncontrols <= 2 * ncases)
identical(test1, test2)
